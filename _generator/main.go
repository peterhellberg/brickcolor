// +build generator

package main

import (
	"fmt"
	"io/ioutil"
	"strings"
	"time"

	htmlquery "github.com/antchfx/htmlquery"
	imports "golang.org/x/tools/imports"
)

const url = "https://developer.roblox.com/articles/BrickColor-Codes"

func main() {
	doc, err := htmlquery.LoadURL(url)
	if err != nil {
		panic(err)
	}

	table := htmlquery.FindOne(doc, "//table[contains(@class,'table')]")

	r := strings.NewReplacer(".", "", "(", "", ")", "", "/", " ", "-", " ")

	src := `// Code generated by "go generate"; DO NOT EDIT.
					//
					`

	generatedAt := time.Now().UTC().Format("2006-01-02 15:04:05 -0700")

	src += "// Generated at: " + generatedAt + `

	package brickcolor

	var (`

	var variableNames []string
	var byNumber [][2]string

	for _, tr := range htmlquery.Find(table, "//tbody/tr") {
		tds := htmlquery.Find(tr, "//td")

		if len(tds) != 5 {
			continue
		}

		hex := htmlquery.SelectAttr(tds[0], "bgcolor")
		name := htmlquery.InnerText(tds[1])
		number := htmlquery.InnerText(tds[2])
		rgb := htmlquery.InnerText(tds[3])

		vn := strings.Replace(strings.Title(r.Replace(name)), " ", "", -1)

		if contains(variableNames, vn) {
			vn += "2"
		}

		variableNames = append(variableNames, vn)
		byNumber = append(byNumber, [2]string{number, vn})

		src += fmt.Sprintf("%s = BrickColor{Name: %q, Number: %s, Hex: %q, RGBA: color.RGBA{%s, 255}}\n", vn, name, number, hex, rgb)
	}

	src += ")\n\n"

	src += "var all = []BrickColor{\n"
	src += strings.Join(variableNames, ",\n")
	src += "}\n\n"

	src += "var byNumber = map[int]BrickColor{\n"
	for _, bn := range byNumber {
		src += fmt.Sprintf("%s: %s,\n", bn[0], bn[1])
	}
	src += "}\n\n"

	res, err := imports.Process("", []byte(src), nil)
	if err != nil {
		panic(err)
	}

	err = ioutil.WriteFile("generated.go", res, 0644)
	if err != nil {
		panic(err)
	}
}

func contains(s []string, e string) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}

	return false
}
